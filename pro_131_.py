# -*- coding: utf-8 -*-
"""pro 131----

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1quLosfKDbdFnxCdfUyirRdxSI-a54sbb
"""

import pandas as pd

df1 = pd.read_csv('main.csv')

df1.head()

df1.columns

df1.drop(['Unnamed: 0'],axis=1,inplace=True)

df1.head()

df1.dtypes

#print(radius)

mass = df1['Mass'].tolist()
#df1['Mass']=df1['Mass'].apply(lambda x: x.replace('$', '').replace(',', '')).astype('float')
print(mass)
#print(len(radius))
gravity =[]

#df1['Radius']=df1['Radius'].apply(lambda x: x.replace('$', '').replace(',', ''))
df1.fillna('0',inplace=True)
df1['Radius']=df1['Radius'].apply(lambda x: x.replace('$', '').replace(',', '')).astype('float')
radius = df1['Radius'].tolist()


#converting solar mass and radius into km & kg
def convert_to_si(radius,mass):
    for i in range(len(radius)):
      radius[i] = radius[i]*6.957e+8
      print('radius')
      print(radius[i])
      mass[i] = mass[i]*1.989e+30
      print('mass')
      print(mass[i])
convert_to_si(radius,mass)

def gravity_calculation(radius,mass):
    G = 6.674e-11
    for index in range(0,len(mass)):
        g= (mass[index]*G)/((radius[index])**2)
        gravity.append(g)

gravity_calculation(radius,mass)

df1["Gravity"] = gravity
df1

"""# **Next project 132**

"""

print(gravity)

import plotly.express as px
fig=px.scatter(x=mass,y=radius)
fig.show()

import plotly.express as px
fig=px.scatter(x=mass,y=gravity)
fig.show()

import plotly.express as px
fig=px.scatter(x=radius,y=gravity,color=mass)
fig.show()

"""# **Next Project 133**"""

from sklearn.cluster import KMeans
# iloc is for the location of the data(a particular row or column in the data set), 0 and 1 are the column names
X = df1.iloc[:,[3,4]].values
wcss = []
for i in range(1,11):
  k_means = KMeans(n_clusters = i, init = 'k-means++', random_state = 42)
  k_means.fit(X)
  print(X)
  # it makes an assumption that the clusters are in convex form
  wcss.append(k_means.inertia_)

import seaborn as sns
import matplotlib.pyplot as plt
plt.figure(figsize = (10,5))
plt.plot(range(1,11),wcss)

#sns.lineplot(range(1,9),wcss,marker = 'o', color = 'red')
plt.show()

k_means = KMeans(n_clusters = 3, init = 'k-means++', random_state = 42)
y_k_means= k_means.fit_predict(X)

"""# **next project (134)**"""

df1["Distance"]

df1['Distance']=df1['Distance'].apply(lambda x: x.replace('$', '').replace(',', '')).astype('float')

df_sorted_distance_stars_index_below100 = []
df_sorted_distance_stars_val_below100 = []
distance = df1["Distance"].tolist()
for i in range(len(distance)):
      if distance[i] <= 100:
        df_sorted_distance_stars_index_below100.append(i)
        df_sorted_distance_stars_val_below100.append(distance[i])
print(len(df_sorted_distance_stars_index_below100))
print(len(df_sorted_distance_stars_val_below100))

df_sorted_distance_stars_index_from150to350 = []
df_sorted_distance_stars_val_from150to350 = []
distance = df1["Distance"].tolist()
for i in range(len(distance)):
      if distance[i] > 150 and distance[i] <350:
        df_sorted_distance_stars_index_from150to350.append(i)
        df_sorted_distance_stars_val_from150to350.append(distance[i])
print(len(df_sorted_distance_stars_index_from150to350))
print(len(df_sorted_distance_stars_val_from150to350))

df_sorted_distance_stars_val_from150to350

stars_name=df1['Star_name'].astype('string')

stars_name

from io import StringIO
df5 = pd.DataFrame(df_sorted_distance_stars_val_below100)

df5.append(stars_name)
df5.to_csv('Below 100.csv')

df150 = pd.DataFrame(df_sorted_distance_stars_val_from150to350)
df150.append(stars_name)
df150.to_csv('From 150 to 350.csv')

"""# **Next Project(135)**

# **Below is the interpretation of the Stars below 100 csv**
"""

dfbelow100=pd.read_csv('Below 100.csv')

stars_name=df1['Star_name']
#Mass, gravity and Radius already made above.
distancebelow100=dfbelow100['0']

fig=px.bar(x=stars_name,y=mass)
fig.show()

fig2=px.bar(x=stars_name,y=radius)
fig2.show()

fig3=px.bar(x=stars_name,y=distance)
fig3.show()

fig4=px.bar(x=stars_name,y=gravity)
fig4.show()

"""# **Below is the interpretation of the Stars from 150 to 350 csv**"""

dfrom150to350=pd.read_csv('From 150 to 350.csv')

#Star name, Mass, gravity and Radius already made above.
distancebelow100=dfbelow100['0']

fig=px.bar(x=stars_name,y=mass)
fig.show()

fig2=px.bar(x=stars_name,y=radius)
fig2.show()

fig3=px.bar(x=stars_name,y=distance)
fig3.show()

fig4=px.bar(x=stars_name,y=gravity)
fig4.show()

fig3=px.bar(x=stars_name,y=distance)
fig3.show()

"""# **in distance graph stars are not showing because they are to small**

# **Next Project 136**
"""

import pandas as pd

df1

stars_name

final_stars_list = []

for i in range(0,len(stars_name)):
  temp_dict = {
      "star_name" : stars_name[i],
      "distance_from_earth" : distance[i],
      "mass" : mass[i],
      "radius" : radius[i],
      "gravity" : gravity[i]
  }
  final_stars_list.append(temp_dict)

print(final_stars_list)